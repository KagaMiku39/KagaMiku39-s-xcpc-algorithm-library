#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>
#include <climits>
#include <numeric>

#define ssize(x) int(x.size())

using namespace std;

template<typename T>
bool cmin(T &a, const T &b) {
    return a > b ? a = b, true : false;
}

void solve() {
    int n, m;
    cin >> n >> m;

    vector<vector<pair<int, int>>> adj(n + 1);
    for (int i = 1; i <= m; i ++) {
        int x, y, w;
        cin >> x >> y >> w;
        adj[x].emplace_back(y, w);
        adj[y].emplace_back(x, w);
    }

    bool res = false;
    int ans = 0;
    vector<int> vis(n + 1), wei(n + 1, INT_MAX), cnt(n + 1);
    priority_queue<pair<int, int>> pq;
    wei[1] = 0;
    pq.emplace(0, 1);
    while (ssize(pq)) {
        auto [w, u] = pq.top();
        pq.pop();
        if (vis[u]) {
            continue;
        }
        res |= cnt[u] > 1;
        ans += -w;
        vis[u] = true;
        for (auto &[v, w]: adj[u]) {
            if (vis[v]) {
                continue;
            }
            if (!cmin(wei[v], w)) {
                cnt[v] += wei[v] == w;
                continue;
            }
            cnt[v] = 1;
            pq.emplace(-w, v);
        }
    }

    if (res) {
        cout << "Not Unique!\n";
    } else {
        cout << ans << '\n';
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;

    while (t --) {
        solve();
    }
    
    return 0;
}